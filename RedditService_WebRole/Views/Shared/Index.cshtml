@model IEnumerable<RedditService_Data.Topic>
@{
    ViewBag.Title = "Index";
    var authCookie = Request.Cookies[System.Web.Security.FormsAuthentication.FormsCookieName];
    string userName = null;
    if (authCookie != null)
    {
        var authTicket = System.Web.Security.FormsAuthentication.Decrypt(authCookie.Value);
        userName = authTicket?.Name;
    }
}

<h2 class="topic-title">Reddit</h2>

@{ var _repository = new RedditService_Data.RedditDataRepository(); }

@if (!string.IsNullOrEmpty(userName))
{
    <p>Welcome, @userName!</p>
}

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <form method="get" action="@Url.Action("Index")" class="form-inline my-2 my-lg-0">
            <input type="text" name="searchString" value="@ViewBag.CurrentFilter" class="form-control mr-sm-2" placeholder="Search by title..." />
            <button type="submit" class="btn btn-outline-success my-2 my-sm-0">Search</button>
        </form>

        <div>
            <button class="btn btn-light" onclick="location.href='@Url.Action("Index", new { sortOrder = "asc", searchString = ViewBag.CurrentFilter })'">Sort ↑</button>
            <button class="btn btn-light" onclick="location.href='@Url.Action("Index", new { sortOrder = "desc", searchString = ViewBag.CurrentFilter })'">Sort ↓</button>
        </div>
    </div>

    @foreach (var item in Model)
    {
        <div class="card mb-4">
            <div class="card-body">
                <div class="media">
                    @if (!string.IsNullOrEmpty(item.ImageUrl))
                    {
                        <img src="@item.ImageUrl" class="mr-3" alt="Image" style="max-width: 150px; height: auto; border-radius: 5px;" />
                    }
                    else
                    {
                        <div class="mr-3 no-image-placeholder">
                            <span>No Image</span>
                        </div>
                    }

                    <div class="media-body">
                        <h3 class="mt-0 topic-title">@Html.DisplayFor(modelItem => item.Title)</h3>
                        <p>@Html.DisplayFor(modelItem => item.Content)</p>
                        <p class="text-muted">Posted by: @Html.DisplayFor(modelItem => item.UserId)</p>
                        <p><em>@Html.DisplayFor(modelItem => item.RowKey)</em></p>

                        @{
                            bool hasVoted = false;
                            bool isSubscribed = false;
                            if (userName != null)
                            {
                                var user = _repository.GetUserByEmail(userName);
                                hasVoted = _repository.HasUserVoted(user.RowKey, item.RowKey);
                                isSubscribed = _repository.IsUserSubscribed(user.Email, item.RowKey);
                            }
                        }

                    <div class="vote-section d-flex justify-content-between align-items-center">
                        <div class="votes">
                            <p class="upvotes"><i class="fas fa-thumbs-up" style="color: green;"></i> Upvotes: @item.Upvotes</p>
                            <p class="downvotes"><i class="fas fa-thumbs-down" style="color: red;"></i> Downvotes: @item.Downvotes</p>
                        </div>

                        @if (!hasVoted && !string.IsNullOrEmpty(userName))
                        {
                            <div class="vote-buttons">
                                <form action="@Url.Action("Upvote", "Topics")" method="post" class="d-inline-block">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@item.RowKey" />
                                    <button type="submit" class="btn btn-outline-primary"><i class="far fa-thumbs-up"></i> Like</button>
                                </form>
                                <form action="@Url.Action("Downvote", "Topics")" method="post" class="d-inline-block">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@item.RowKey" />
                                    <button type="submit" class="btn btn-outline-danger"><i class="far fa-thumbs-down"></i> Dislike</button>
                                </form>
                            </div>
                        }
                        else if(string.IsNullOrEmpty(userName))
                        {
                            <p class="text-danger mb-0">Log in to vote</p>
                        }
                        else
                        {
                            <p class="text-success mb-0">Voted</p>
                        }
                    </div>

                    <div class="action-buttons mt-3 d-flex justify-content-end">
                        @if (item.UserId == userName)
                        {
                            using (Html.BeginForm("Delete", "Topics", FormMethod.Post))
                            {
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="id" value="@item.RowKey" />
                                <button type="submit" class="btn btn-danger ml-2" onclick="return confirm('Are you sure you want to delete this topic?');">Delete</button>
                            }
                        }


                        @if (!string.IsNullOrEmpty(userName))
                        {
                            <a href="@Url.Action("Add", "Comment", new { id = item.RowKey })" class="btn btn-secondary ml-2">Comment</a>
                            if (!isSubscribed)
                            {
                                 <form action="@Url.Action("Subscribe", "Topics")" method="post" class="d-inline-block ml-2">
                                       @Html.AntiForgeryToken()
                                       <input type="hidden" name="topicId" value="@item.RowKey" />
                                         <button type="submit" class="btn btn-outline-info">Subscribe</button>
                                 </form> }
                            else
                                 {
                                 <button class="btn btn-outline-secondary ml-2" disabled>Subscribed</button>
                                 }
                        }




                    </div>

                        <div class="mt-4">
                            @Html.Partial("_Comment", _repository.RetrieveAllComments().Where(c => c.TopicId == item.RowKey))
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>